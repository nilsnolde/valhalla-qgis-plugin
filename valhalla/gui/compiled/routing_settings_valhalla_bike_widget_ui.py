# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'valhalla/resources/ui/routing_settings_valhalla_bike_widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_settings_valhalla_bike(object):
    def setupUi(self, settings_valhalla_bike):
        settings_valhalla_bike.setObjectName("settings_valhalla_bike")
        settings_valhalla_bike.resize(636, 498)
        self.verticalLayout = QtWidgets.QVBoxLayout(settings_valhalla_bike)
        self.verticalLayout.setObjectName("verticalLayout")
        self.penalties = gui.QgsCollapsibleGroupBox(settings_valhalla_bike)
        self.penalties.setObjectName("penalties")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.penalties)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.penalties_column_1 = QtWidgets.QFormLayout()
        self.penalties_column_1.setObjectName("penalties_column_1")
        self.maneuver_penalty_label = QtWidgets.QLabel(self.penalties)
        self.maneuver_penalty_label.setOpenExternalLinks(True)
        self.maneuver_penalty_label.setObjectName("maneuver_penalty_label")
        self.penalties_column_1.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.maneuver_penalty_label)
        self.maneuver_penalty = gui.QgsSpinBox(self.penalties)
        self.maneuver_penalty.setMaximum(43200)
        self.maneuver_penalty.setProperty("value", 5)
        self.maneuver_penalty.setObjectName("maneuver_penalty")
        self.penalties_column_1.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.maneuver_penalty)
        self.gate_penalty_label = QtWidgets.QLabel(self.penalties)
        self.gate_penalty_label.setOpenExternalLinks(True)
        self.gate_penalty_label.setObjectName("gate_penalty_label")
        self.penalties_column_1.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.gate_penalty_label)
        self.gate_penalty = gui.QgsSpinBox(self.penalties)
        self.gate_penalty.setMaximum(43200)
        self.gate_penalty.setProperty("value", 300)
        self.gate_penalty.setObjectName("gate_penalty")
        self.penalties_column_1.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.gate_penalty)
        self.horizontalLayout_8.addLayout(self.penalties_column_1)
        self.penalties_column_2 = QtWidgets.QFormLayout()
        self.penalties_column_2.setObjectName("penalties_column_2")
        self.service_penalty_label = QtWidgets.QLabel(self.penalties)
        self.service_penalty_label.setOpenExternalLinks(True)
        self.service_penalty_label.setObjectName("service_penalty_label")
        self.penalties_column_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.service_penalty_label)
        self.service_penalty = gui.QgsSpinBox(self.penalties)
        self.service_penalty.setMaximum(43200)
        self.service_penalty.setProperty("value", 15)
        self.service_penalty.setObjectName("service_penalty")
        self.penalties_column_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.service_penalty)
        self.country_crossing_penalty_label = QtWidgets.QLabel(self.penalties)
        self.country_crossing_penalty_label.setOpenExternalLinks(True)
        self.country_crossing_penalty_label.setObjectName("country_crossing_penalty_label")
        self.penalties_column_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.country_crossing_penalty_label)
        self.country_crossing_penalty = gui.QgsSpinBox(self.penalties)
        self.country_crossing_penalty.setMaximum(43200)
        self.country_crossing_penalty.setObjectName("country_crossing_penalty")
        self.penalties_column_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.country_crossing_penalty)
        self.horizontalLayout_8.addLayout(self.penalties_column_2)
        self.verticalLayout.addWidget(self.penalties)
        self.favor_types = gui.QgsCollapsibleGroupBox(settings_valhalla_bike)
        self.favor_types.setObjectName("favor_types")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.favor_types)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.formLayout_5 = QtWidgets.QFormLayout()
        self.formLayout_5.setObjectName("formLayout_5")
        self.use_roads_label = QtWidgets.QLabel(self.favor_types)
        self.use_roads_label.setObjectName("use_roads_label")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.use_roads_label)
        self.use_hills_label = QtWidgets.QLabel(self.favor_types)
        self.use_hills_label.setObjectName("use_hills_label")
        self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.use_hills_label)
        self.use_roads = gui.QgsDoubleSpinBox(self.favor_types)
        self.use_roads.setMinimum(0.0)
        self.use_roads.setMaximum(1.0)
        self.use_roads.setSingleStep(0.05)
        self.use_roads.setProperty("value", 0.5)
        self.use_roads.setObjectName("use_roads")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.use_roads)
        self.use_hills = gui.QgsDoubleSpinBox(self.favor_types)
        self.use_hills.setMaximum(1.0)
        self.use_hills.setSingleStep(0.05)
        self.use_hills.setProperty("value", 0.5)
        self.use_hills.setObjectName("use_hills")
        self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.use_hills)
        self.avoid_bad_surfaces = gui.QgsDoubleSpinBox(self.favor_types)
        self.avoid_bad_surfaces.setMaximum(1.0)
        self.avoid_bad_surfaces.setSingleStep(0.05)
        self.avoid_bad_surfaces.setProperty("value", 0.25)
        self.avoid_bad_surfaces.setObjectName("avoid_bad_surfaces")
        self.formLayout_5.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.avoid_bad_surfaces)
        self.avoid_bad_surfaces_label = QtWidgets.QLabel(self.favor_types)
        self.avoid_bad_surfaces_label.setObjectName("avoid_bad_surfaces_label")
        self.formLayout_5.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.avoid_bad_surfaces_label)
        self.horizontalLayout_7.addLayout(self.formLayout_5)
        self.formLayout_6 = QtWidgets.QFormLayout()
        self.formLayout_6.setObjectName("formLayout_6")
        self.use_living_streets = gui.QgsDoubleSpinBox(self.favor_types)
        self.use_living_streets.setMaximum(1.0)
        self.use_living_streets.setSingleStep(0.05)
        self.use_living_streets.setProperty("value", 0.5)
        self.use_living_streets.setObjectName("use_living_streets")
        self.formLayout_6.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.use_living_streets)
        self.use_ferry = gui.QgsDoubleSpinBox(self.favor_types)
        self.use_ferry.setMaximum(1.0)
        self.use_ferry.setSingleStep(0.05)
        self.use_ferry.setProperty("value", 0.5)
        self.use_ferry.setObjectName("use_ferry")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.use_ferry)
        self.use_ferry_label = QtWidgets.QLabel(self.favor_types)
        self.use_ferry_label.setObjectName("use_ferry_label")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.use_ferry_label)
        self.use_living_streets_label = QtWidgets.QLabel(self.favor_types)
        self.use_living_streets_label.setObjectName("use_living_streets_label")
        self.formLayout_6.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.use_living_streets_label)
        self.horizontalLayout_7.addLayout(self.formLayout_6)
        self.verticalLayout.addWidget(self.favor_types)
        self.additional_parameters_box = gui.QgsCollapsibleGroupBox(settings_valhalla_bike)
        self.additional_parameters_box.setObjectName("additional_parameters_box")
        self.formLayout_4 = QtWidgets.QFormLayout(self.additional_parameters_box)
        self.formLayout_4.setObjectName("formLayout_4")
        self.bicycle_type_label = QtWidgets.QLabel(self.additional_parameters_box)
        self.bicycle_type_label.setObjectName("bicycle_type_label")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.bicycle_type_label)
        self.bicycle_type = QtWidgets.QComboBox(self.additional_parameters_box)
        self.bicycle_type.setObjectName("bicycle_type")
        self.bicycle_type.addItem("")
        self.bicycle_type.addItem("")
        self.bicycle_type.addItem("")
        self.bicycle_type.addItem("")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.bicycle_type)
        self.cycling_speed_label = QtWidgets.QLabel(self.additional_parameters_box)
        self.cycling_speed_label.setObjectName("cycling_speed_label")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.cycling_speed_label)
        self.cycling_speed = gui.QgsSpinBox(self.additional_parameters_box)
        self.cycling_speed.setObjectName("cycling_speed")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.cycling_speed)
        self.verticalLayout.addWidget(self.additional_parameters_box)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)

        self.retranslateUi(settings_valhalla_bike)
        self.bicycle_type.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(settings_valhalla_bike)

    def retranslateUi(self, settings_valhalla_bike):
        _translate = QtCore.QCoreApplication.translate
        settings_valhalla_bike.setWindowTitle(_translate("settings_valhalla_bike", "Form"))
        self.penalties.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>Penalty options are fixed costs in seconds that are only added to the path cost. Penalties can influence the route path determination but do not add to the estimated time along the path. Penalties must be in the range of 0.0 seconds to 43200.0 seconds (12 hours).</p></body></html>"))
        self.penalties.setTitle(_translate("settings_valhalla_bike", "Penalties"))
        self.maneuver_penalty_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>A penalty applied when transitioning between roads that do not have consistent naming–in other words, no road names in common.</p></body></html>"))
        self.maneuver_penalty_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Maneuver</span></a></p></body></html>"))
        self.gate_penalty_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>A penalty applied when a gate with no access information is on the road.</p></body></html>"))
        self.gate_penalty_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Gate</span></a></p></body></html>"))
        self.service_penalty_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>A penalty applied for transition to generic service road. </p></body></html>"))
        self.service_penalty_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Service</span></a></p></body></html>"))
        self.country_crossing_penalty_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><table border=\"0\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;\" cellspacing=\"2\" cellpadding=\"0\"><tr><td/><td><p>A penalty applied for a country crossing.</p></td></tr></table></body></html>"))
        self.country_crossing_penalty_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Country crossing</span></a></p></body></html>"))
        self.favor_types.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><table border=\"0\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;\" cellspacing=\"2\" cellpadding=\"0\"><tr><td/><td><p>Favor type values indicate the willingness to take a certain road type. This is a range of values between 0 and 1. Values near 0 attempt to avoid the road type and values near 1 will favor them a little bit. Note that sometimes certain road types are required to complete a route so values of 0 are not guaranteed to avoid them entirely.</p></td></tr></table></body></html>"))
        self.favor_types.setTitle(_translate("settings_valhalla_bike", "Favor types"))
        self.use_roads_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>A cyclist\'s propensity to use roads alongside other vehicles. This is a range of values from 0 to 1, where 0 attempts to avoid roads and stay on cycleways and paths, and 1 indicates the rider is more comfortable riding on roads. Based on the <span style=\" font-family:\'.SF NS Mono\';\">use_roads</span> factor, roads with certain classifications and higher speeds are penalized in an attempt to avoid them when finding the best path.</p></body></html>"))
        self.use_roads_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use roads</span></a></p></body></html>"))
        self.use_hills_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>A cyclist\'s desire to tackle hills in their routes. This is a range of values from 0 to 1, where 0 attempts to avoid hills and steep grades even if it means a longer (time and distance) path, while 1 indicates the rider does not fear hills and steeper grades. Based on the <span style=\" font-family:\'.SF NS Mono\';\">use_hills</span> factor, penalties are applied to roads based on elevation change and grade. These penalties help the path avoid hilly roads in favor of flatter roads or less steep grades where available.</p></body></html>"))
        self.use_hills_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use hills</span></a></p></body></html>"))
        self.avoid_bad_surfaces_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>This value is meant to represent how much a cyclist wants to avoid roads with poor surfaces relative to the bicycle type being used. This is a range of values between 0 and 1. When the value is 0, there is no penalization of roads with different surface types; only bicycle speed on each surface is taken into account. As the value approaches 1, roads with poor surfaces for the bike are penalized heavier so that they are only taken if they significantly improve travel time. When the value is equal to 1, all bad surfaces are completely disallowed from routing, including start and end points.</p></body></html>"))
        self.avoid_bad_surfaces_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Avoid bad surfaces</span></a></p></body></html>"))
        self.use_ferry_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>This value indicates the willingness to take ferries.</p></body></html>"))
        self.use_ferry_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use ferry</span></a></p></body></html>"))
        self.use_living_streets_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>This value indicates the willingness to take living streets. This is a range of values between 0 and 1. Values near 0 attempt to avoid living streets and values from 0.5 to 1 will currently have no effect on route selection. </p></body></html>"))
        self.use_living_streets_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use living streets</span></a></p></body></html>"))
        self.additional_parameters_box.setTitle(_translate("settings_valhalla_bike", "Additional parameters"))
        self.bicycle_type_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>The type of bicycle.</p><ul style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'.SF NS Mono\';\">Road</span>: a road-style bicycle with narrow tires that is generally lightweight and designed for speed on paved surfaces. </li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'.SF NS Mono\';\">Hybrid</span>: a bicycle made mostly for city riding or casual riding on roads and paths with good surfaces.</li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'.SF NS Mono\';\">Cross</span>: a cyclo-cross bicycle, which is similar to a road bicycle but with wider tires suitable to rougher surfaces.</li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'.SF NS Mono\';\">Mountain</span>: a mountain bicycle suitable for most surfaces but generally heavier and slower on paved surfaces.</li></ul></body></html>"))
        self.bicycle_type_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Bicycle type</span></a></p></body></html>"))
        self.bicycle_type.setItemText(0, _translate("settings_valhalla_bike", "Road"))
        self.bicycle_type.setItemText(1, _translate("settings_valhalla_bike", "Hybrid"))
        self.bicycle_type.setItemText(2, _translate("settings_valhalla_bike", "Cross"))
        self.bicycle_type.setItemText(3, _translate("settings_valhalla_bike", "Mountain"))
        self.cycling_speed_label.setToolTip(_translate("settings_valhalla_bike", "<html><head/><body><p>Cycling speed is the average travel speed along smooth, flat roads. This is meant to be the speed a rider can comfortably maintain over the desired distance of the route. It can be modified (in the costing method) by surface type in conjunction with bicycle type and (coming soon) by hilliness of the road section. When no speed is specifically provided, the default speed is determined by the bicycle type and are as follows: Road = 25 KPH (15.5 MPH), Cross = 20 KPH (13 MPH), Hybrid/City = 18 KPH (11.5 MPH), and Mountain = 16 KPH (10 MPH).</p></body></html>"))
        self.cycling_speed_label.setText(_translate("settings_valhalla_bike", "<html><head/><body><p><a href=\"https://github.com/valhalla/valhalla/blob/master/docs/api/turn-by-turn/api-reference.md#bicycle-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Cycling speed</span></a></p></body></html>"))
from qgis import gui
