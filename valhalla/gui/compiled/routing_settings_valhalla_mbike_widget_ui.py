# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'valhalla/resources/ui/routing_settings_valhalla_mbike_widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_settings_valhalla_mbike(object):
    def setupUi(self, settings_valhalla_mbike):
        settings_valhalla_mbike.setObjectName("settings_valhalla_mbike")
        settings_valhalla_mbike.resize(605, 642)
        self.verticalLayout = QtWidgets.QVBoxLayout(settings_valhalla_mbike)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.penalties_box = QgsCollapsibleGroupBox(settings_valhalla_mbike)
        self.penalties_box.setCollapsed(True)
        self.penalties_box.setObjectName("penalties_box")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.penalties_box)
        self.horizontalLayout_7.setContentsMargins(7, 7, 0, 7)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.penalties_column_1 = QtWidgets.QFormLayout()
        self.penalties_column_1.setObjectName("penalties_column_1")
        self.toll_booth_penalty_label = QtWidgets.QLabel(self.penalties_box)
        self.toll_booth_penalty_label.setOpenExternalLinks(True)
        self.toll_booth_penalty_label.setObjectName("toll_booth_penalty_label")
        self.penalties_column_1.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.toll_booth_penalty_label)
        self.toll_booth_penalty = QgsSpinBox(self.penalties_box)
        self.toll_booth_penalty.setMaximum(43200)
        self.toll_booth_penalty.setObjectName("toll_booth_penalty")
        self.penalties_column_1.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.toll_booth_penalty)
        self.service_penalty = QgsSpinBox(self.penalties_box)
        self.service_penalty.setMaximum(43200)
        self.service_penalty.setProperty("value", 15)
        self.service_penalty.setObjectName("service_penalty")
        self.penalties_column_1.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.service_penalty)
        self.country_crossing_penalty = QgsSpinBox(self.penalties_box)
        self.country_crossing_penalty.setMaximum(43200)
        self.country_crossing_penalty.setObjectName("country_crossing_penalty")
        self.penalties_column_1.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.country_crossing_penalty)
        self.service_penalty_label = QtWidgets.QLabel(self.penalties_box)
        self.service_penalty_label.setOpenExternalLinks(True)
        self.service_penalty_label.setObjectName("service_penalty_label")
        self.penalties_column_1.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.service_penalty_label)
        self.country_crossing_penalty_label = QtWidgets.QLabel(self.penalties_box)
        self.country_crossing_penalty_label.setOpenExternalLinks(True)
        self.country_crossing_penalty_label.setObjectName("country_crossing_penalty_label")
        self.penalties_column_1.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.country_crossing_penalty_label)
        self.horizontalLayout_7.addLayout(self.penalties_column_1)
        self.penalties_column_2 = QtWidgets.QFormLayout()
        self.penalties_column_2.setObjectName("penalties_column_2")
        self.maneuver_penalty_label = QtWidgets.QLabel(self.penalties_box)
        self.maneuver_penalty_label.setOpenExternalLinks(True)
        self.maneuver_penalty_label.setObjectName("maneuver_penalty_label")
        self.penalties_column_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.maneuver_penalty_label)
        self.maneuver_penalty = QgsSpinBox(self.penalties_box)
        self.maneuver_penalty.setMaximum(43200)
        self.maneuver_penalty.setProperty("value", 5)
        self.maneuver_penalty.setObjectName("maneuver_penalty")
        self.penalties_column_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.maneuver_penalty)
        self.gate_penalty = QgsSpinBox(self.penalties_box)
        self.gate_penalty.setMaximum(43200)
        self.gate_penalty.setProperty("value", 300)
        self.gate_penalty.setObjectName("gate_penalty")
        self.penalties_column_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.gate_penalty)
        self.gate_penalty_label = QtWidgets.QLabel(self.penalties_box)
        self.gate_penalty_label.setOpenExternalLinks(True)
        self.gate_penalty_label.setObjectName("gate_penalty_label")
        self.penalties_column_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.gate_penalty_label)
        self.private_access_penalty = QgsSpinBox(self.penalties_box)
        self.private_access_penalty.setMaximum(43200)
        self.private_access_penalty.setProperty("value", 450)
        self.private_access_penalty.setObjectName("private_access_penalty")
        self.penalties_column_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.private_access_penalty)
        self.private_access_penalty_label = QtWidgets.QLabel(self.penalties_box)
        self.private_access_penalty_label.setOpenExternalLinks(True)
        self.private_access_penalty_label.setObjectName("private_access_penalty_label")
        self.penalties_column_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.private_access_penalty_label)
        self.horizontalLayout_7.addLayout(self.penalties_column_2)
        self.verticalLayout.addWidget(self.penalties_box)
        self.favor_types_box = QgsCollapsibleGroupBox(settings_valhalla_mbike)
        self.favor_types_box.setCollapsed(True)
        self.favor_types_box.setObjectName("favor_types_box")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.favor_types_box)
        self.horizontalLayout_4.setContentsMargins(7, 7, 0, 7)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.formLayout_4 = QtWidgets.QFormLayout()
        self.formLayout_4.setObjectName("formLayout_4")
        self.use_ferry = QgsDoubleSpinBox(self.favor_types_box)
        self.use_ferry.setMaximum(1.0)
        self.use_ferry.setSingleStep(0.05)
        self.use_ferry.setProperty("value", 0.5)
        self.use_ferry.setObjectName("use_ferry")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.use_ferry)
        self.use_highways = QgsDoubleSpinBox(self.favor_types_box)
        self.use_highways.setMaximum(1.0)
        self.use_highways.setSingleStep(0.05)
        self.use_highways.setProperty("value", 1.0)
        self.use_highways.setObjectName("use_highways")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.use_highways)
        self.use_ferry_label = QtWidgets.QLabel(self.favor_types_box)
        self.use_ferry_label.setOpenExternalLinks(True)
        self.use_ferry_label.setObjectName("use_ferry_label")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.use_ferry_label)
        self.use_highways_label = QtWidgets.QLabel(self.favor_types_box)
        self.use_highways_label.setOpenExternalLinks(True)
        self.use_highways_label.setObjectName("use_highways_label")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.use_highways_label)
        self.use_tolls = QgsDoubleSpinBox(self.favor_types_box)
        self.use_tolls.setMaximum(1.0)
        self.use_tolls.setSingleStep(0.05)
        self.use_tolls.setProperty("value", 0.5)
        self.use_tolls.setObjectName("use_tolls")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.use_tolls)
        self.use_tolls_label = QtWidgets.QLabel(self.favor_types_box)
        self.use_tolls_label.setOpenExternalLinks(True)
        self.use_tolls_label.setObjectName("use_tolls_label")
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.use_tolls_label)
        self.horizontalLayout_4.addLayout(self.formLayout_4)
        self.formLayout_5 = QtWidgets.QFormLayout()
        self.formLayout_5.setObjectName("formLayout_5")
        self.use_living_streets_label = QtWidgets.QLabel(self.favor_types_box)
        self.use_living_streets_label.setOpenExternalLinks(True)
        self.use_living_streets_label.setObjectName("use_living_streets_label")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.use_living_streets_label)
        self.use_tracks_label = QtWidgets.QLabel(self.favor_types_box)
        self.use_tracks_label.setOpenExternalLinks(True)
        self.use_tracks_label.setObjectName("use_tracks_label")
        self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.use_tracks_label)
        self.use_living_streets = QgsDoubleSpinBox(self.favor_types_box)
        self.use_living_streets.setMaximum(1.0)
        self.use_living_streets.setSingleStep(0.05)
        self.use_living_streets.setProperty("value", 0.1)
        self.use_living_streets.setObjectName("use_living_streets")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.use_living_streets)
        self.use_tracks = QgsDoubleSpinBox(self.favor_types_box)
        self.use_tracks.setMaximum(1.0)
        self.use_tracks.setSingleStep(0.05)
        self.use_tracks.setObjectName("use_tracks")
        self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.use_tracks)
        self.use_trails_label = QtWidgets.QLabel(self.favor_types_box)
        self.use_trails_label.setObjectName("use_trails_label")
        self.formLayout_5.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.use_trails_label)
        self.use_trails = QgsDoubleSpinBox(self.favor_types_box)
        self.use_trails.setMaximum(1.0)
        self.use_trails.setSingleStep(0.05)
        self.use_trails.setObjectName("use_trails")
        self.formLayout_5.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.use_trails)
        self.horizontalLayout_4.addLayout(self.formLayout_5)
        self.verticalLayout.addWidget(self.favor_types_box)
        self.addtional_params_box = QgsCollapsibleGroupBox(settings_valhalla_mbike)
        self.addtional_params_box.setCollapsed(True)
        self.addtional_params_box.setObjectName("addtional_params_box")
        self.formLayout_6 = QtWidgets.QFormLayout(self.addtional_params_box)
        self.formLayout_6.setObjectName("formLayout_6")
        self.top_speed_label = QtWidgets.QLabel(self.addtional_params_box)
        self.top_speed_label.setOpenExternalLinks(True)
        self.top_speed_label.setObjectName("top_speed_label")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.top_speed_label)
        self.top_speed = QgsSpinBox(self.addtional_params_box)
        self.top_speed.setMinimum(10)
        self.top_speed.setMaximum(252)
        self.top_speed.setProperty("value", 140)
        self.top_speed.setObjectName("top_speed")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.top_speed)
        self.closure_factor_label = QtWidgets.QLabel(self.addtional_params_box)
        self.closure_factor_label.setOpenExternalLinks(True)
        self.closure_factor_label.setObjectName("closure_factor_label")
        self.formLayout_6.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.closure_factor_label)
        self.closure_factor = QgsDoubleSpinBox(self.addtional_params_box)
        self.closure_factor.setMinimum(0.1)
        self.closure_factor.setMaximum(10.0)
        self.closure_factor.setSingleStep(0.1)
        self.closure_factor.setProperty("value", 9.0)
        self.closure_factor.setObjectName("closure_factor")
        self.formLayout_6.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.closure_factor)
        self.service_factor_label = QtWidgets.QLabel(self.addtional_params_box)
        self.service_factor_label.setOpenExternalLinks(True)
        self.service_factor_label.setObjectName("service_factor_label")
        self.formLayout_6.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.service_factor_label)
        self.service_factor = QgsDoubleSpinBox(self.addtional_params_box)
        self.service_factor.setMinimum(0.1)
        self.service_factor.setMaximum(100000.0)
        self.service_factor.setSingleStep(0.1)
        self.service_factor.setObjectName("service_factor")
        self.formLayout_6.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.service_factor)
        self.ignore_closures_label = QtWidgets.QLabel(self.addtional_params_box)
        self.ignore_closures_label.setOpenExternalLinks(True)
        self.ignore_closures_label.setObjectName("ignore_closures_label")
        self.formLayout_6.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.ignore_closures_label)
        self.ignore_closures = QtWidgets.QComboBox(self.addtional_params_box)
        self.ignore_closures.setMaxVisibleItems(9)
        self.ignore_closures.setObjectName("ignore_closures")
        self.ignore_closures.addItem("")
        self.ignore_closures.addItem("")
        self.formLayout_6.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.ignore_closures)
        self.verticalLayout.addWidget(self.addtional_params_box)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)

        self.retranslateUi(settings_valhalla_mbike)
        self.ignore_closures.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(settings_valhalla_mbike)

    def retranslateUi(self, settings_valhalla_mbike):
        _translate = QtCore.QCoreApplication.translate
        settings_valhalla_mbike.setWindowTitle(_translate("settings_valhalla_mbike", "Form"))
        self.penalties_box.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>Penalty options are fixed costs in seconds that are only added to the path cost. Penalties can influence the route path determination but do not add to the estimated time along the path. Penalties must be in the range of 0.0 seconds to 43200.0 seconds (12 hours).</p></body></html>"))
        self.penalties_box.setTitle(_translate("settings_valhalla_mbike", "Penalties"))
        self.toll_booth_penalty_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A penalty applied to the cost when a toll<a href=\"http://wiki.openstreetmap.org/wiki/Tag:barrier%3Dtoll_booth\"><span style=\" text-decoration: underline; color:#0068da;\"/></a>booth is encountered.</p></body></html>"))
        self.toll_booth_penalty_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Toll booth</span></a></p></body></html>"))
        self.service_penalty_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A penalty applied for transition to generic service road. </p></body></html>"))
        self.service_penalty_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Service</span></a></p></body></html>"))
        self.country_crossing_penalty_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><table border=\"0\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;\" cellspacing=\"2\" cellpadding=\"0\"><tr><td/><td><p>A penalty applied for a country crossing.</p></td></tr></table></body></html>"))
        self.country_crossing_penalty_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Country crossing</span></a></p></body></html>"))
        self.maneuver_penalty_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A penalty applied when transitioning between roads that do not have consistent naming–in other words, no road names in common.</p></body></html>"))
        self.maneuver_penalty_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Maneuver</span></a></p></body></html>"))
        self.gate_penalty_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A penalty applied when a gate with no access information is on the road.</p></body></html>"))
        self.gate_penalty_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Gate</span></a></p></body></html>"))
        self.private_access_penalty_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A penalty applied when a gate or bollard with <span style=\" font-family:\'.SF NS Mono\';\">access=private</span> is encountered. </p></body></html>"))
        self.private_access_penalty_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Private access</span></a></p></body></html>"))
        self.favor_types_box.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><table border=\"0\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;\" cellspacing=\"2\" cellpadding=\"0\"><tr><td/><td><p>Favor type values indicate the willingness to take a certain road type. This is a range of values between 0 and 1. Values near 0 attempt to avoid the road type and values near 1 will favor them a little bit. Note that sometimes certain road types are required to complete a route so values of 0 are not guaranteed to avoid them entirely.</p></td></tr></table></body></html>"))
        self.favor_types_box.setTitle(_translate("settings_valhalla_mbike", "Favor types"))
        self.use_ferry_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>This value indicates the willingness to take ferries.</p></body></html>"))
        self.use_ferry_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use ferry</span></a></p></body></html>"))
        self.use_highways_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A riders\'s propensity to prefer the use of highways.</p></body></html>"))
        self.use_highways_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#motorcycle-costing-options---beta\"><span style=\" text-decoration: underline; color:#000000;\">Use highways</span></a></p></body></html>"))
        self.use_tolls_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>This value indicates the willingness to take roads with tolls.</p></body></html>"))
        self.use_tolls_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use tolls</span></a></p></body></html>"))
        self.use_living_streets_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>This value indicates the willingness to take living streets.</p></body></html>"))
        self.use_living_streets_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use living streets</span></a></p></body></html>"))
        self.use_tracks_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>This value indicates the willingness to take track roads.</p></body></html>"))
        self.use_tracks_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Use tracks</span></a></p></body></html>"))
        self.use_trails_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#motorcycle-costing-options---beta\"><span style=\" text-decoration: underline; color:#000000;\">Use trails</span></a></p></body></html>"))
        self.addtional_params_box.setTitle(_translate("settings_valhalla_mbike", "Additional parameters"))
        self.top_speed_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>Top speed the vehicle can go. Also used to avoid roads with higher speeds than this value. <span style=\" font-family:\'.SF NS Mono\';\">top_speed</span> must be between 10 and 252 KPH.</p></body></html>"))
        self.top_speed_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Top speed</span></a></p></body></html>"))
        self.closure_factor_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A factor that penalizes the cost when traversing a closed edge. Its value can range from <span style=\" font-family:\'.SF NS Mono\';\">1.0</span> - don\'t penalize closed edges, to <span style=\" font-family:\'.SF NS Mono\';\">10.0</span> - apply high cost penalty to closed edges.</p></body></html>"))
        self.closure_factor_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Closure factor</span></a></p></body></html>"))
        self.service_factor_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>A factor that modifies (multiplies) the cost when generic service roads are encountered.</p></body></html>"))
        self.service_factor_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Service factor</span></a></p></body></html>"))
        self.ignore_closures_label.setToolTip(_translate("settings_valhalla_mbike", "<html><head/><body><p>If set to <span style=\" font-family:\'.SF NS Mono\';\">true</span>, ignores all closures, marked due to live traffic closures, during routing. </p></body></html>"))
        self.ignore_closures_label.setText(_translate("settings_valhalla_mbike", "<html><head/><body><p><a href=\"https://valhalla.github.io/valhalla/api/turn-by-turn/api-reference.md#automobile-and-bus-costing-options\"><span style=\" text-decoration: underline; color:#000000;\">Ignore closures</span></a></p></body></html>"))
        self.ignore_closures.setCurrentText(_translate("settings_valhalla_mbike", "false"))
        self.ignore_closures.setItemText(0, _translate("settings_valhalla_mbike", "true"))
        self.ignore_closures.setItemText(1, _translate("settings_valhalla_mbike", "false"))
from qgscollapsiblegroupbox import QgsCollapsibleGroupBox
from qgsdoublespinbox import QgsDoubleSpinBox
from qgsspinbox import QgsSpinBox
